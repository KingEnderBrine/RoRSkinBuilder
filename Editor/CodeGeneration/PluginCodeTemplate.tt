<#@ template language="C#" Inherits="PluginCodeTemplateBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="RoRSkinBuilder.Data" #>
<#@ import namespace="UnityEngine.Rendering" #>
using BepInEx;
using BepInEx.Logging;
using RoR2;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using UnityEngine;
using System.Security;
using System.Security.Permissions;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

#pragma warning disable CS0618 // Type or member is obsolete
[module: UnverifiableCode]
[assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]
#pragma warning restore CS0618 // Type or member is obsolete
[assembly: R2API.Utils.ManualNetworkRegistration]
[assembly: EnigmaticThunder.Util.ManualNetworkRegistration]
namespace <#= AssetsInfo.uccModName #>
{
<# foreach (var dependency in DistinctDependencies) { #>
    [BepInDependency("<#= dependency.Key #>", BepInDependency.DependencyFlags.<#= Enum.GetName(typeof(DependencyType), dependency.Value) #>)]
<# } #>
    
    [BepInPlugin("com.<#= SkinModInfo.author #>.<#= AssetsInfo.uccModName #>","<#= SkinModInfo.modName #>","<#= SkinModInfo.version #>")]
    public partial class <#= AssetsInfo.uccModName #>Plugin : BaseUnityPlugin
    {
        internal static <#= AssetsInfo.uccModName #>Plugin Instance { get; private set; }
        internal static ManualLogSource InstanceLogger => Instance?.Logger;
        
        private static AssetBundle assetBundle;
<# if (AssetsInfo.materialsWithRoRShader.Count != 0) { #>
        private static readonly List<Material> materialsWithRoRShader = new List<Material>();
<# } #>
        private void Awake()
        {
            Instance = this;
            BeforeAwake();
            using (var assetStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("<#= AssetsInfo.uccModName #>.<#= AssetsInfo.assetBundleName #>"))
            {
                assetBundle = AssetBundle.LoadFromStream(assetStream);
            }

            BodyCatalog.availability.CallWhenAvailable(BodyCatalogInit);
            HookEndpointManager.Add(typeof(Language).GetMethod(nameof(Language.LoadStrings)), (Action<Action<Language>, Language>)LanguageLoadStrings);

            ReplaceShaders();

            AfterAwake();
        }

        partial void BeforeAwake();
        partial void AfterAwake();
        static partial void BeforeBodyCatalogInit();
        static partial void AfterBodyCatalogInit();

        private static void ReplaceShaders()
        {
<# foreach (var material in AssetsInfo.materialsWithRoRShader) { #>
            materialsWithRoRShader.Add(LoadMaterialWithReplacedShader(@"<#= AssetsInfo.materialPaths[material.Key] #>", @"<#= material.Value #>"));
<# } #>
        }

        private static Material LoadMaterialWithReplacedShader(string materialPath, string shaderName)
        {
            var material = assetBundle.LoadAsset<Material>(materialPath);
            material.shader = Shader.Find(shaderName);

            return material;
        }

        private static void LanguageLoadStrings(Action<Language> orig, Language self)
        {
            orig(self);

<# var tokensByLanguage = new Dictionary<string, Dictionary<string, string>>();
var defaultTokens = new Dictionary<string, string>();

foreach (var skin in ReorderedSkins) {
    if (skin.nameTokenLocalizations.Count == 0) {
        continue;
    }
    var nameToken = skin.CreateNameToken(SkinModInfo.author);
    defaultTokens[nameToken] = (skin.nameTokenLocalizations.FirstOrDefault(el => el.language.ToLower() == "en") ?? skin.nameTokenLocalizations.First()).value; 
    
    foreach (var localization in skin.nameTokenLocalizations) {
        if (defaultTokens[nameToken] == localization.value) {
            continue;
        }
        var language = localization.language.ToLower();
        if (!tokensByLanguage.TryGetValue(language, out var tokens)) {
            tokensByLanguage[language] = tokens = new Dictionary<string, string>();
        }
        tokens[nameToken] = localization.value;
    } 
} #>
<# foreach (var row in defaultTokens) { #>
            self.SetStringByToken("<#= row.Key #>", "<#= row.Value #>");
<# } #>

<# if (tokensByLanguage.Count > 0) { #>
            switch(self.name.ToLower())
            {
<#     foreach (var row in tokensByLanguage) { #>
                case "<#= row.Key #>":
<#         foreach (var value in row.Value) { #>
                    self.SetStringByToken("<#= value.Key #>", "<#= value.Value #>");
<#         } #>
                    break;
<#     } #>
            }
<# } #>
        }

        private static void Nothing(Action<SkinDef> orig, SkinDef self)
        {

        }

        private static void BodyCatalogInit()
        {
            BeforeBodyCatalogInit();

            var awake = typeof(SkinDef).GetMethod(nameof(SkinDef.Awake), BindingFlags.NonPublic | BindingFlags.Instance);
            HookEndpointManager.Add(awake, (Action<Action<SkinDef>, SkinDef>)Nothing);

<# foreach (var skin in ReorderedSkins) { #>
            Add<#= skin.bodyName.ToUpperCamelCase() #><#= skin.name.ToUpperCamelCase() #>Skin();
<# } #>
            
            HookEndpointManager.Remove(awake, (Action<Action<SkinDef>, SkinDef>)Nothing);

            AfterBodyCatalogInit();
        }
<# foreach (var skin in ReorderedSkins) { #>

        static partial void <#= skin.bodyName.ToUpperCamelCase() #><#= skin.name.ToUpperCamelCase() #>SkinAdded(SkinDef skinDef, GameObject bodyPrefab);

        private static void Add<#= skin.bodyName.ToUpperCamelCase() #><#= skin.name.ToUpperCamelCase() #>Skin()
        {
<# if (!string.IsNullOrWhiteSpace(skin.modDependency.value) && skin.modDependency.type == DependencyType.SoftDependency) { #>
            if (!BepInEx.Bootstrap.Chainloader.PluginInfos.ContainsKey("<#= skin.modDependency.value #>"))
            {
                return;
            }
<# } #>
<# if (skin.config.generateEnableConfig) { #>
            if (!Instance.Config.Bind("<#= skin.name.ToUpperCamelCase() #>", "Enabled", <#= skin.config.enableConfigDefaultValue ? "true" : "false" #>).Value)
            {
                return;
            }
<# } #>
            var bodyName = "<#= skin.bodyName #>";
            var skinName = "<#= skin.name #>";
            try
            {
                var bodyPrefab = BodyCatalog.FindBodyPrefab(bodyName);
                var modelLocator = bodyPrefab.GetComponent<ModelLocator>();
                var mdl = modelLocator.modelTransform.gameObject;
                var skinController = mdl.GetComponent<ModelSkinController>();

<# switch (skin.renderersSource)
{
    case RenderersSource.AllRendererComponents: #>
                var renderers = mdl.GetComponentsInChildren<Renderer>(true);
<#      break;
    case RenderersSource.BaseRendererInfos: #>
                var characterModel = mdl.GetComponent<CharacterModel>();
                var renderers = characterModel.baseRendererInfos.Select(info => info.renderer).ToArray();
<#      break;
} #>

                var skin = ScriptableObject.CreateInstance<SkinDef>();
<# if (!skin.icon.createFromColors) {
        if (skin.icon.sprite) { #>
                skin.icon = assetBundle.LoadAsset<Sprite>(@"<#= AssetsInfo.iconPaths[skin.icon.sprite] #>");
<#      } else { #>
                skin.icon = null;
<#      } 
    } else { #>
                skin.icon = assetBundle.LoadAsset<Sprite>(@"<#= AssetsInfo.iconFromColorPaths[skin.icon.colors] #>");
<# } #>
                skin.name = skinName;
                skin.nameToken = "<#= skin.CreateNameToken(SkinModInfo.author) #>";
                skin.rootObject = mdl;
<# if (skin.baseSkins.Count == 0) { #>
                skin.baseSkins = Array.Empty<SkinDef>();
<# } else { #>
                skin.baseSkins = new SkinDef[] 
                { 
<# foreach (var reference in skin.baseSkins) { 
    if (reference.accessType == AccessType.ByIndex) { #>
                    skinController.skins[<#= reference.index #>],
<# } else { #>
                    skinController.skins.First(s => s.Name == "<#= reference.name #>")
<# } 
} #>
                };
<# } 
if (string.IsNullOrWhiteSpace(skin.unlockableName)) { #>
                skin.unlockableDef = null;
<# } else { #>
                skin.unlockableDef = ContentManager.unlockableDefs.FirstOrDefault(def => def.cachedName == "<#= skin.unlockableName #>");
<# }
if (skin.gameObjectActivations.Count == 0) { #>
                skin.gameObjectActivations = Array.Empty<SkinDef.GameObjectActivation>();
<# } else { #>
                skin.gameObjectActivations = new SkinDef.GameObjectActivation[]
                {
<# foreach (var activation in skin.gameObjectActivations) { #>
                    new SkinDef.GameObjectActivation
                    {
                        gameObject = renderers[<#= activation.rendererIndex #>].gameObject,
                        shouldActivate = <# if (activation.shouldActivate) #>true
<# else #>false
                    },
<# } #>
                };
<# } 
if (skin.rendererInfos.Count == 0) { #>
                skin.rendererInfos = Array.Empty<CharacterModel.RendererInfo>();
<# } else { #>
                skin.rendererInfos = new CharacterModel.RendererInfo[]
                {
<# foreach (var rendererInfo in skin.rendererInfos) { #>
                    new CharacterModel.RendererInfo
                    {
<# if (rendererInfo.defaultMaterial == null) { #>
                        defaultMaterial = null,
<# } else { #>
                        defaultMaterial = assetBundle.LoadAsset<Material>(@"<#= AssetsInfo.materialPaths[rendererInfo.defaultMaterial] #>"),
<# } #>
                        defaultShadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.<#= Enum.GetName(typeof(ShadowCastingMode), rendererInfo.defaultShadowCastingMode) #>,
                        ignoreOverlays = <# if (rendererInfo.ignoreOverlays) #>true,
<# else #>false,
<# if (rendererInfo.rendererReference.accessType == AccessType.ByIndex) { #>
                        renderer = renderers[<#= rendererInfo.rendererReference.index #>]
<# } else { #>
                        renderer = renderers.First(r => r.name == "<#= rendererInfo.rendererReference.name #>")
<# } #>
                    },
<# } #>
                };
<# }
if (skin.meshReplacements.Count == 0) { #>
                skin.meshReplacements = Array.Empty<SkinDef.MeshReplacement>();
<# } else { #>
                skin.meshReplacements = new SkinDef.MeshReplacement[]
                {
<# foreach (var replacement in skin.meshReplacements) { #>
                    new SkinDef.MeshReplacement
                    {
<# if (replacement.mesh == null) { #>
                        mesh = null,
<# } else { #>
                        mesh = assetBundle.LoadAsset<Mesh>(@"<#= AssetsInfo.meshPaths[replacement.mesh] #>"),
<# } 
if (replacement.rendererReference.accessType == AccessType.ByIndex) { #>
                        renderer = renderers[<#= replacement.rendererReference.index #>]
<# } else { #>
                        renderer = renderers.First(r => r.name == "<#= replacement.rendererReference.name #>")
<# } #>
                    },
<# } #>
                };
<# }
if (skin.minionSkinReplacements.Count == 0) { #>
                skin.minionSkinReplacements = Array.Empty<SkinDef.MinionSkinReplacement>();
<# } else { #>
                skin.minionSkinReplacements = new SkinDef.MinionSkinReplacement[]
                {
<# foreach (var replacement in skin.minionSkinReplacements) {
    if (!replacement.findSkinByReference && replacement.skin == null) {
        continue;
    } #>
                    new SkinDef.MinionSkinReplacement
                    {
                        minionBodyPrefab = BodyCatalog.FindBodyPrefab(@"<#= replacement.bodyName #>"),
<# if (replacement.findSkinByReference) { 
    if (replacement.reference.accessType == AccessType.ByIndex) { #>
                        minionSkin = BodyCatalog.GetBodySkins(BodyCatalog.FindBodyIndex(@"<#= replacement.bodyName #>"))[<#= replacement.reference.index #>]
<# } else { #>
                        minionSkin = BodyCatalog.GetBodySkins(BodyCatalog.FindBodyIndex(@"<#= replacement.bodyName #>")).First(s => s.name == @"<#= replacement.reference.name #>")
    <# }
} else { #>
                        minionSkin = BodyCatalog.GetBodySkins(BodyCatalog.FindBodyIndex(@"<#= replacement.bodyName #>")).First(s => s.name == @"<#= replacement.skin.name #>")
<# } #>
                    },
<# } #>
                };
<# } 
if (skin.projectileGhostReplacements.Count == 0) { #>
                skin.projectileGhostReplacements = Array.Empty<SkinDef.ProjectileGhostReplacement>();
<# } else { #>
                skin.projectileGhostReplacements = new SkinDef.ProjectileGhostReplacement[]
                {
<# foreach (var replacement in skin.projectileGhostReplacements) { #>
                    new SkinDef.ProjectileGhostReplacement
                    {
                        projectilePrefab = Resources.Load<GameObject>(@"<#= replacement.projectilePath #>"),
<# if (replacement.useResourcesPath) { #>
                        projectileGhostReplacementPrefab = Resources.Load<GameObject>(@"<#= replacement.projectileGhostPath #>")
<# } else { #>
                        projectileGhostReplacementPrefab = assetBundle.LoadAsset<GameObject>(@"<#= AssetsInfo.gameObjectPaths[replacement.projectileGhost] #>")
<# } #>
                    },
<# } #>
                };
<# } #>

                Array.Resize(ref skinController.skins, skinController.skins.Length + 1);
                skinController.skins[skinController.skins.Length - 1] = skin;

                BodyCatalog.skins[(int)BodyCatalog.FindBodyIndex(bodyPrefab)] = skinController.skins;
                <#= skin.bodyName.ToUpperCamelCase() #><#= skin.name.ToUpperCamelCase() #>SkinAdded(skin, bodyPrefab);
            }
            catch (Exception e)
            {
                InstanceLogger.LogWarning($"Failed to add \"{skinName}\" skin to \"{bodyName}\"");
                InstanceLogger.LogError(e);
            }
        }
<# } #>
    }

}

namespace R2API.Utils
{
    [AttributeUsage(AttributeTargets.Assembly)]
    public class ManualNetworkRegistrationAttribute : Attribute { }
}

namespace EnigmaticThunder.Util
{
    [AttributeUsage(AttributeTargets.Assembly)]
    public class ManualNetworkRegistrationAttribute : Attribute { }
}
